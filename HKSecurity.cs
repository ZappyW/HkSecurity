// Bu eklenti, Hosting Kirala ekibi tarafından yazılmış olup sunucu ayarlarını denetler. Oyuncu limiti gibi değerlerin eklentide düzenleme yapılarak veya farklı bir şekilde aşılması sunucunuzun askıya alınmasıyla sonuçlanabilir.

using System; using Oxide.Core; using Physics = UnityEngine.Physics; using UnityEngine; namespace Oxide.Plugins { [Info("Güvenlik", "Hosting Kirala", "1.0.0")] [Description("Hosting Kirala müşterileri için, sunucu güvenliklerini ve ayarlarını denetler.")] class HostingKiralaSecurity : RustPlugin { private int restart; void OnServerInitialized(bool initial) { Physics.IgnoreLayerCollision(26, 26, true); var maxpl = ConVar.Server.maxplayers; var fx = ConVar.FPS.limit; restart = 0; timer.Every(3f, () => { if (DateTime.Now.AddHours(3).Hour == 7 && restart == 0) { if (UnityEngine.Time.realtimeSinceStartup > 172800) { restart = 1; Server.Command("restart 1800"); } } if (maxpl < ConVar.Server.maxplayers) { Server.Command("maxplayers " + maxpl); PrintWarning("UYARI!"); PrintWarning("Satın aldığınız oyuncu giriş limitini düşürebilirsiniz fakat yükseltemezsiniz. Aksi halde sunucunuz askıya alınabilir."); PrintWarning("Limit yükseltimi için müşteri paneli üzerinden destek talebi atabilirsiniz."); } if (BasePlayer.activePlayerList.Count > 0) { if (ConVar.FPS.limit != fx) { Server.Command("fps.limit "+fx); } } else { if (ConVar.FPS.limit != 15) { Server.Command("fps.limit 15"); } } }); } void OnItemDropped(Item item, BaseEntity entity) { if (item.despawnMultiplier.ToString() == "1" && item.info.stackable.ToString() == "1") { timer.Once(180f, () => { item.RemoveFromWorld(); }); } } bool Unload() { Interface.Oxide.LoadPlugin("HostingKiralaSecurity"); return false; } } }
